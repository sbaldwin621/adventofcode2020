<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="166" onload="init(evt)" viewBox="0 0 1200 166" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="166" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="149.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="149.00"> </text><svg id="frames" x="10" width="1180" total_samples="42016"><g><title>crab_cups`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (51 samples, 0.12%)</title><rect x="0.0048%" y="101" width="0.1214%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="51"/><text x="0.2548%" y="111.50"></text></g><g><title>crab_cups`&lt;Q as indexmap::equivalent::Equivalent&lt;K&gt;&gt;::equivalent (8 samples, 0.02%)</title><rect x="0.1261%" y="101" width="0.0190%" height="15" fill="rgb(217,0,24)" fg:x="53" fg:w="8"/><text x="0.3761%" y="111.50"></text></g><g><title>crab_cups`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.04%)</title><rect x="0.1737%" y="101" width="0.0381%" height="15" fill="rgb(221,193,54)" fg:x="73" fg:w="16"/><text x="0.4237%" y="111.50"></text></g><g><title>crab_cups`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (7 samples, 0.02%)</title><rect x="0.2261%" y="101" width="0.0167%" height="15" fill="rgb(248,212,6)" fg:x="95" fg:w="7"/><text x="0.4761%" y="111.50"></text></g><g><title>crab_cups`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (23 samples, 0.05%)</title><rect x="0.2428%" y="101" width="0.0547%" height="15" fill="rgb(208,68,35)" fg:x="102" fg:w="23"/><text x="0.4928%" y="111.50"></text></g><g><title>crab_cups`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (52 samples, 0.12%)</title><rect x="0.2975%" y="101" width="0.1238%" height="15" fill="rgb(232,128,0)" fg:x="125" fg:w="52"/><text x="0.5475%" y="111.50"></text></g><g><title>crab_cups`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (88 samples, 0.21%)</title><rect x="0.4213%" y="101" width="0.2094%" height="15" fill="rgb(207,160,47)" fg:x="177" fg:w="88"/><text x="0.6713%" y="111.50"></text></g><g><title>crab_cups`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (179 samples, 0.43%)</title><rect x="0.6307%" y="101" width="0.4260%" height="15" fill="rgb(228,23,34)" fg:x="265" fg:w="179"/><text x="0.8807%" y="111.50"></text></g><g><title>crab_cups`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.02%)</title><rect x="1.0567%" y="101" width="0.0167%" height="15" fill="rgb(218,30,26)" fg:x="444" fg:w="7"/><text x="1.3067%" y="111.50"></text></g><g><title>crab_cups`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="1.0734%" y="101" width="0.0190%" height="15" fill="rgb(220,122,19)" fg:x="451" fg:w="8"/><text x="1.3234%" y="111.50"></text></g><g><title>crab_cups`&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (15 samples, 0.04%)</title><rect x="1.1043%" y="101" width="0.0357%" height="15" fill="rgb(250,228,42)" fg:x="464" fg:w="15"/><text x="1.3543%" y="111.50"></text></g><g><title>crab_cups`&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (82 samples, 0.20%)</title><rect x="1.1400%" y="101" width="0.1952%" height="15" fill="rgb(240,193,28)" fg:x="479" fg:w="82"/><text x="1.3900%" y="111.50"></text></g><g><title>crab_cups`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.05%)</title><rect x="1.3352%" y="101" width="0.0500%" height="15" fill="rgb(216,20,37)" fg:x="561" fg:w="21"/><text x="1.5852%" y="111.50"></text></g><g><title>crab_cups`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (5 samples, 0.01%)</title><rect x="1.3852%" y="101" width="0.0119%" height="15" fill="rgb(206,188,39)" fg:x="582" fg:w="5"/><text x="1.6352%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.06%)</title><rect x="1.3971%" y="101" width="0.0571%" height="15" fill="rgb(217,207,13)" fg:x="587" fg:w="24"/><text x="1.6471%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.03%)</title><rect x="1.4542%" y="101" width="0.0309%" height="15" fill="rgb(231,73,38)" fg:x="611" fg:w="13"/><text x="1.7042%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="1.4994%" y="101" width="0.0167%" height="15" fill="rgb(225,20,46)" fg:x="630" fg:w="7"/><text x="1.7494%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::inner::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.24%)</title><rect x="1.5161%" y="101" width="0.2380%" height="15" fill="rgb(210,31,41)" fg:x="637" fg:w="100"/><text x="1.7661%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.04%)</title><rect x="1.7541%" y="101" width="0.0428%" height="15" fill="rgb(221,200,47)" fg:x="737" fg:w="18"/><text x="2.0041%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::inner::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.16%)</title><rect x="1.7969%" y="101" width="0.1571%" height="15" fill="rgb(226,26,5)" fg:x="755" fg:w="66"/><text x="2.0469%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.05%)</title><rect x="1.9540%" y="101" width="0.0452%" height="15" fill="rgb(249,33,26)" fg:x="821" fg:w="19"/><text x="2.2040%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::inner::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.01%)</title><rect x="1.9992%" y="101" width="0.0119%" height="15" fill="rgb(235,183,28)" fg:x="840" fg:w="5"/><text x="2.2492%" y="111.50"></text></g><g><title>crab_cups`&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.08%)</title><rect x="2.0111%" y="101" width="0.0833%" height="15" fill="rgb(221,5,38)" fg:x="845" fg:w="35"/><text x="2.2611%" y="111.50"></text></g><g><title>crab_cups`&lt;petgraph::graphmap::CompactDirection as core::cmp::PartialEq&lt;petgraph::Direction&gt;&gt;::eq (11 samples, 0.03%)</title><rect x="2.1016%" y="101" width="0.0262%" height="15" fill="rgb(247,18,42)" fg:x="883" fg:w="11"/><text x="2.3516%" y="111.50"></text></g><g><title>crab_cups`&lt;petgraph::graphmap::Neighbors&lt;N,Ty&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.01%)</title><rect x="2.1420%" y="101" width="0.0119%" height="15" fill="rgb(241,131,45)" fg:x="900" fg:w="5"/><text x="2.3920%" y="111.50"></text></g><g><title>crab_cups`&lt;petgraph::graphmap::Neighbors&lt;N,Ty&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (12 samples, 0.03%)</title><rect x="2.1539%" y="101" width="0.0286%" height="15" fill="rgb(249,31,29)" fg:x="905" fg:w="12"/><text x="2.4039%" y="111.50"></text></g><g><title>crab_cups`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.01%)</title><rect x="2.1825%" y="101" width="0.0143%" height="15" fill="rgb(225,111,53)" fg:x="917" fg:w="6"/><text x="2.4325%" y="111.50"></text></g><g><title>crab_cups`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.02%)</title><rect x="2.1968%" y="101" width="0.0190%" height="15" fill="rgb(238,160,17)" fg:x="923" fg:w="8"/><text x="2.4468%" y="111.50"></text></g><g><title>crab_cups`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.02%)</title><rect x="2.2158%" y="101" width="0.0238%" height="15" fill="rgb(214,148,48)" fg:x="931" fg:w="10"/><text x="2.4658%" y="111.50"></text></g><g><title>crab_cups`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.01%)</title><rect x="2.2444%" y="101" width="0.0143%" height="15" fill="rgb(232,36,49)" fg:x="943" fg:w="6"/><text x="2.4944%" y="111.50"></text></g><g><title>crab_cups`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="2.2682%" y="101" width="0.0167%" height="15" fill="rgb(209,103,24)" fg:x="953" fg:w="7"/><text x="2.5182%" y="111.50"></text></g><g><title>crab_cups`alloc::alloc::Global::alloc_impl (5 samples, 0.01%)</title><rect x="2.2872%" y="101" width="0.0119%" height="15" fill="rgb(229,88,8)" fg:x="961" fg:w="5"/><text x="2.5372%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.02%)</title><rect x="2.3515%" y="37" width="0.0167%" height="15" fill="rgb(213,181,19)" fg:x="988" fg:w="7"/><text x="2.6015%" y="47.50"></text></g><g><title>crab_cups`alloc::alloc::alloc (34 samples, 0.08%)</title><rect x="2.2991%" y="101" width="0.0809%" height="15" fill="rgb(254,191,54)" fg:x="966" fg:w="34"/><text x="2.5491%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.08%)</title><rect x="2.3015%" y="85" width="0.0785%" height="15" fill="rgb(241,83,37)" fg:x="967" fg:w="33"/><text x="2.5515%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.07%)</title><rect x="2.3086%" y="69" width="0.0714%" height="15" fill="rgb(233,36,39)" fg:x="970" fg:w="30"/><text x="2.5586%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 0.05%)</title><rect x="2.3301%" y="53" width="0.0500%" height="15" fill="rgb(226,3,54)" fg:x="979" fg:w="21"/><text x="2.5801%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.01%)</title><rect x="2.3681%" y="37" width="0.0119%" height="15" fill="rgb(245,192,40)" fg:x="995" fg:w="5"/><text x="2.6181%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7,331 samples, 17.45%)</title><rect x="2.3848%" y="85" width="17.4481%" height="15" fill="rgb(238,167,29)" fg:x="1002" fg:w="7331"/><text x="2.6348%" y="95.50">libsystem_kernel.dylib`madv..</text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.03%)</title><rect x="19.8329%" y="85" width="0.0333%" height="15" fill="rgb(232,182,51)" fg:x="8333" fg:w="14"/><text x="20.0829%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.01%)</title><rect x="19.8543%" y="69" width="0.0119%" height="15" fill="rgb(231,60,39)" fg:x="8342" fg:w="5"/><text x="20.1043%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.01%)</title><rect x="19.8662%" y="85" width="0.0119%" height="15" fill="rgb(208,69,12)" fg:x="8347" fg:w="5"/><text x="20.1162%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.01%)</title><rect x="19.9019%" y="53" width="0.0119%" height="15" fill="rgb(235,93,37)" fg:x="8362" fg:w="5"/><text x="20.1519%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.02%)</title><rect x="19.9138%" y="53" width="0.0238%" height="15" fill="rgb(213,116,39)" fg:x="8367" fg:w="10"/><text x="20.1638%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (5 samples, 0.01%)</title><rect x="19.9424%" y="53" width="0.0119%" height="15" fill="rgb(222,207,29)" fg:x="8379" fg:w="5"/><text x="20.1924%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (33 samples, 0.08%)</title><rect x="19.8805%" y="85" width="0.0785%" height="15" fill="rgb(206,96,30)" fg:x="8353" fg:w="33"/><text x="20.1305%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28 samples, 0.07%)</title><rect x="19.8924%" y="69" width="0.0666%" height="15" fill="rgb(218,138,4)" fg:x="8358" fg:w="28"/><text x="20.1424%" y="79.50"></text></g><g><title>crab_cups`alloc::alloc::dealloc (7,394 samples, 17.60%)</title><rect x="2.3800%" y="101" width="17.5981%" height="15" fill="rgb(250,191,14)" fg:x="1000" fg:w="7394"/><text x="2.6300%" y="111.50">crab_cups`alloc::alloc::dea..</text></g><g><title>crab_cups`alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (5 samples, 0.01%)</title><rect x="19.9781%" y="101" width="0.0119%" height="15" fill="rgb(239,60,40)" fg:x="8394" fg:w="5"/><text x="20.2281%" y="111.50"></text></g><g><title>crab_cups`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (19 samples, 0.05%)</title><rect x="19.9900%" y="101" width="0.0452%" height="15" fill="rgb(206,27,48)" fg:x="8399" fg:w="19"/><text x="20.2400%" y="111.50"></text></g><g><title>crab_cups`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.03%)</title><rect x="20.0352%" y="101" width="0.0333%" height="15" fill="rgb(225,35,8)" fg:x="8418" fg:w="14"/><text x="20.2852%" y="111.50"></text></g><g><title>crab_cups`alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (6 samples, 0.01%)</title><rect x="20.0685%" y="101" width="0.0143%" height="15" fill="rgb(250,213,24)" fg:x="8432" fg:w="6"/><text x="20.3185%" y="111.50"></text></g><g><title>crab_cups`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.04%)</title><rect x="20.0828%" y="101" width="0.0381%" height="15" fill="rgb(247,123,22)" fg:x="8438" fg:w="16"/><text x="20.3328%" y="111.50"></text></g><g><title>crab_cups`alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.01%)</title><rect x="20.1352%" y="101" width="0.0119%" height="15" fill="rgb(231,138,38)" fg:x="8460" fg:w="5"/><text x="20.3852%" y="111.50"></text></g><g><title>crab_cups`alloc::raw_vec::finish_grow (14 samples, 0.03%)</title><rect x="20.1471%" y="101" width="0.0333%" height="15" fill="rgb(231,145,46)" fg:x="8465" fg:w="14"/><text x="20.3971%" y="111.50"></text></g><g><title>crab_cups`alloc::raw_vec::handle_reserve (9 samples, 0.02%)</title><rect x="20.1804%" y="101" width="0.0214%" height="15" fill="rgb(251,118,11)" fg:x="8479" fg:w="9"/><text x="20.4304%" y="111.50"></text></g><g><title>crab_cups`alloc::vec::Vec&lt;T&gt;::as_mut_ptr (13 samples, 0.03%)</title><rect x="20.2018%" y="101" width="0.0309%" height="15" fill="rgb(217,147,25)" fg:x="8488" fg:w="13"/><text x="20.4518%" y="111.50"></text></g><g><title>crab_cups`alloc::vec::Vec&lt;T&gt;::as_ptr (48 samples, 0.11%)</title><rect x="20.2328%" y="101" width="0.1142%" height="15" fill="rgb(247,81,37)" fg:x="8501" fg:w="48"/><text x="20.4828%" y="111.50"></text></g><g><title>crab_cups`alloc::vec::Vec&lt;T&gt;::push (35 samples, 0.08%)</title><rect x="20.3613%" y="101" width="0.0833%" height="15" fill="rgb(209,12,38)" fg:x="8555" fg:w="35"/><text x="20.6113%" y="111.50"></text></g><g><title>crab_cups`alloc::vec::Vec&lt;T&gt;::swap_remove (5 samples, 0.01%)</title><rect x="20.4517%" y="101" width="0.0119%" height="15" fill="rgb(227,1,9)" fg:x="8593" fg:w="5"/><text x="20.7017%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::Layout::align (11 samples, 0.03%)</title><rect x="20.4684%" y="101" width="0.0262%" height="15" fill="rgb(248,47,43)" fg:x="8600" fg:w="11"/><text x="20.7184%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::Layout::extend (7 samples, 0.02%)</title><rect x="20.5041%" y="101" width="0.0167%" height="15" fill="rgb(221,10,30)" fg:x="8615" fg:w="7"/><text x="20.7541%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::Layout::from_size_align (13 samples, 0.03%)</title><rect x="20.5208%" y="101" width="0.0309%" height="15" fill="rgb(210,229,1)" fg:x="8622" fg:w="13"/><text x="20.7708%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::Layout::from_size_align_unchecked (24 samples, 0.06%)</title><rect x="20.5517%" y="101" width="0.0571%" height="15" fill="rgb(222,148,37)" fg:x="8635" fg:w="24"/><text x="20.8017%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::Layout::pad_to_align (10 samples, 0.02%)</title><rect x="20.6183%" y="101" width="0.0238%" height="15" fill="rgb(234,67,33)" fg:x="8663" fg:w="10"/><text x="20.8683%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::Layout::padding_needed_for (14 samples, 0.03%)</title><rect x="20.6421%" y="101" width="0.0333%" height="15" fill="rgb(247,98,35)" fg:x="8673" fg:w="14"/><text x="20.8921%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::Layout::repeat (16 samples, 0.04%)</title><rect x="20.6755%" y="101" width="0.0381%" height="15" fill="rgb(247,138,52)" fg:x="8687" fg:w="16"/><text x="20.9255%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::Layout::size (10 samples, 0.02%)</title><rect x="20.7135%" y="101" width="0.0238%" height="15" fill="rgb(213,79,30)" fg:x="8703" fg:w="10"/><text x="20.9635%" y="111.50"></text></g><g><title>crab_cups`core::alloc::layout::size_align (6 samples, 0.01%)</title><rect x="20.7373%" y="101" width="0.0143%" height="15" fill="rgb(246,177,23)" fg:x="8713" fg:w="6"/><text x="20.9873%" y="111.50"></text></g><g><title>crab_cups`core::cmp::Ord::min (19 samples, 0.05%)</title><rect x="20.7611%" y="101" width="0.0452%" height="15" fill="rgb(230,62,27)" fg:x="8723" fg:w="19"/><text x="21.0111%" y="111.50"></text></g><g><title>crab_cups`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (51 samples, 0.12%)</title><rect x="20.8064%" y="101" width="0.1214%" height="15" fill="rgb(216,154,8)" fg:x="8742" fg:w="51"/><text x="21.0564%" y="111.50"></text></g><g><title>crab_cups`core::cmp::impls::_&lt;impl core::cmp::PartialEq for u32&gt;::eq (9 samples, 0.02%)</title><rect x="20.9277%" y="101" width="0.0214%" height="15" fill="rgb(244,35,45)" fg:x="8793" fg:w="9"/><text x="21.1777%" y="111.50"></text></g><g><title>crab_cups`core::cmp::max_by (14 samples, 0.03%)</title><rect x="20.9682%" y="101" width="0.0333%" height="15" fill="rgb(251,115,12)" fg:x="8810" fg:w="14"/><text x="21.2182%" y="111.50"></text></g><g><title>crab_cups`core::cmp::min_by (107 samples, 0.25%)</title><rect x="21.0039%" y="101" width="0.2547%" height="15" fill="rgb(240,54,50)" fg:x="8825" fg:w="107"/><text x="21.2539%" y="111.50"></text></g><g><title>crab_cups`core::hash::Hasher::write_u32 (8 samples, 0.02%)</title><rect x="21.2586%" y="101" width="0.0190%" height="15" fill="rgb(233,84,52)" fg:x="8932" fg:w="8"/><text x="21.5086%" y="111.50"></text></g><g><title>crab_cups`core::hash::impls::_&lt;impl core::hash::Hash for u32&gt;::hash (7 samples, 0.02%)</title><rect x="21.2800%" y="101" width="0.0167%" height="15" fill="rgb(207,117,47)" fg:x="8941" fg:w="7"/><text x="21.5300%" y="111.50"></text></g><g><title>crab_cups`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (22 samples, 0.05%)</title><rect x="21.2966%" y="101" width="0.0524%" height="15" fill="rgb(249,43,39)" fg:x="8948" fg:w="22"/><text x="21.5466%" y="111.50"></text></g><g><title>crab_cups`core::hash::sip::Hasher&lt;S&gt;::reset (62 samples, 0.15%)</title><rect x="21.3490%" y="101" width="0.1476%" height="15" fill="rgb(209,38,44)" fg:x="8970" fg:w="62"/><text x="21.5990%" y="111.50"></text></g><g><title>crab_cups`core::hash::sip::SipHasher13::new_with_keys (15 samples, 0.04%)</title><rect x="21.4966%" y="101" width="0.0357%" height="15" fill="rgb(236,212,23)" fg:x="9032" fg:w="15"/><text x="21.7466%" y="111.50"></text></g><g><title>crab_cups`core::hash::sip::u8to64_le (59 samples, 0.14%)</title><rect x="21.5323%" y="101" width="0.1404%" height="15" fill="rgb(242,79,21)" fg:x="9047" fg:w="59"/><text x="21.7823%" y="111.50"></text></g><g><title>crab_cups`core::intrinsics::copy_nonoverlapping (208 samples, 0.50%)</title><rect x="21.6727%" y="101" width="0.4950%" height="15" fill="rgb(211,96,35)" fg:x="9106" fg:w="208"/><text x="21.9227%" y="111.50"></text></g><g><title>crab_cups`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (5 samples, 0.01%)</title><rect x="22.1677%" y="101" width="0.0119%" height="15" fill="rgb(253,215,40)" fg:x="9314" fg:w="5"/><text x="22.4177%" y="111.50"></text></g><g><title>crab_cups`core::iter::traits::iterator::Iterator::try_fold (11 samples, 0.03%)</title><rect x="22.1987%" y="101" width="0.0262%" height="15" fill="rgb(211,81,21)" fg:x="9327" fg:w="11"/><text x="22.4487%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl isize&gt;::overflowing_neg (100 samples, 0.24%)</title><rect x="22.2296%" y="101" width="0.2380%" height="15" fill="rgb(208,190,38)" fg:x="9340" fg:w="100"/><text x="22.4796%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl isize&gt;::wrapping_neg (47 samples, 0.11%)</title><rect x="22.4676%" y="101" width="0.1119%" height="15" fill="rgb(235,213,38)" fg:x="9440" fg:w="47"/><text x="22.7176%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl u64&gt;::from_ne_bytes (70 samples, 0.17%)</title><rect x="22.5890%" y="101" width="0.1666%" height="15" fill="rgb(237,122,38)" fg:x="9491" fg:w="70"/><text x="22.8390%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl u64&gt;::rotate_left (280 samples, 0.67%)</title><rect x="22.7556%" y="101" width="0.6664%" height="15" fill="rgb(244,218,35)" fg:x="9561" fg:w="280"/><text x="23.0056%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl u64&gt;::trailing_zeros (12 samples, 0.03%)</title><rect x="23.4292%" y="101" width="0.0286%" height="15" fill="rgb(240,68,47)" fg:x="9844" fg:w="12"/><text x="23.6792%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl u64&gt;::wrapping_add (143 samples, 0.34%)</title><rect x="23.4577%" y="101" width="0.3403%" height="15" fill="rgb(210,16,53)" fg:x="9856" fg:w="143"/><text x="23.7077%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl u64&gt;::wrapping_sub (14 samples, 0.03%)</title><rect x="23.7981%" y="101" width="0.0333%" height="15" fill="rgb(235,124,12)" fg:x="9999" fg:w="14"/><text x="24.0481%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl usize&gt;::checked_add (5 samples, 0.01%)</title><rect x="23.8314%" y="101" width="0.0119%" height="15" fill="rgb(224,169,11)" fg:x="10013" fg:w="5"/><text x="24.0814%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl usize&gt;::is_power_of_two (7 samples, 0.02%)</title><rect x="23.8576%" y="101" width="0.0167%" height="15" fill="rgb(250,166,2)" fg:x="10024" fg:w="7"/><text x="24.1076%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl usize&gt;::overflowing_add (25 samples, 0.06%)</title><rect x="23.8742%" y="101" width="0.0595%" height="15" fill="rgb(242,216,29)" fg:x="10031" fg:w="25"/><text x="24.1242%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl usize&gt;::overflowing_mul (12 samples, 0.03%)</title><rect x="23.9337%" y="101" width="0.0286%" height="15" fill="rgb(230,116,27)" fg:x="10056" fg:w="12"/><text x="24.1837%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl usize&gt;::wrapping_add (6 samples, 0.01%)</title><rect x="23.9623%" y="101" width="0.0143%" height="15" fill="rgb(228,99,48)" fg:x="10068" fg:w="6"/><text x="24.2123%" y="111.50"></text></g><g><title>crab_cups`core::num::_&lt;impl usize&gt;::wrapping_sub (28 samples, 0.07%)</title><rect x="23.9766%" y="101" width="0.0666%" height="15" fill="rgb(253,11,6)" fg:x="10074" fg:w="28"/><text x="24.2266%" y="111.50"></text></g><g><title>crab_cups`core::num::nonzero::NonZeroUsize::get (7 samples, 0.02%)</title><rect x="24.0432%" y="101" width="0.0167%" height="15" fill="rgb(247,143,39)" fg:x="10102" fg:w="7"/><text x="24.2932%" y="111.50"></text></g><g><title>crab_cups`core::num::nonzero::NonZeroUsize::new_unchecked (9 samples, 0.02%)</title><rect x="24.0599%" y="101" width="0.0214%" height="15" fill="rgb(236,97,10)" fg:x="10109" fg:w="9"/><text x="24.3099%" y="111.50"></text></g><g><title>crab_cups`core::ops::function::FnOnce::call_once (44 samples, 0.10%)</title><rect x="24.0861%" y="101" width="0.1047%" height="15" fill="rgb(233,208,19)" fg:x="10120" fg:w="44"/><text x="24.3361%" y="111.50"></text></g><g><title>crab_cups`core::option::Option&lt;T&gt;::map (11 samples, 0.03%)</title><rect x="24.2146%" y="101" width="0.0262%" height="15" fill="rgb(216,164,2)" fg:x="10174" fg:w="11"/><text x="24.4646%" y="111.50"></text></g><g><title>crab_cups`core::option::Option&lt;T&gt;::ok_or (29 samples, 0.07%)</title><rect x="24.2408%" y="101" width="0.0690%" height="15" fill="rgb(220,129,5)" fg:x="10185" fg:w="29"/><text x="24.4908%" y="111.50"></text></g><g><title>crab_cups`core::option::Option&lt;T&gt;::unwrap (11 samples, 0.03%)</title><rect x="24.3098%" y="101" width="0.0262%" height="15" fill="rgb(242,17,10)" fg:x="10214" fg:w="11"/><text x="24.5598%" y="111.50"></text></g><g><title>crab_cups`core::ptr::const_ptr::_&lt;impl *const T&gt;::add (6 samples, 0.01%)</title><rect x="24.3360%" y="101" width="0.0143%" height="15" fill="rgb(242,107,0)" fg:x="10225" fg:w="6"/><text x="24.5860%" y="111.50"></text></g><g><title>crab_cups`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (5 samples, 0.01%)</title><rect x="24.3502%" y="101" width="0.0119%" height="15" fill="rgb(251,28,31)" fg:x="10231" fg:w="5"/><text x="24.6002%" y="111.50"></text></g><g><title>crab_cups`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (9 samples, 0.02%)</title><rect x="24.3621%" y="101" width="0.0214%" height="15" fill="rgb(233,223,10)" fg:x="10236" fg:w="9"/><text x="24.6121%" y="111.50"></text></g><g><title>crab_cups`core::ptr::const_ptr::_&lt;impl *const T&gt;::offset (19 samples, 0.05%)</title><rect x="24.3836%" y="101" width="0.0452%" height="15" fill="rgb(215,21,27)" fg:x="10245" fg:w="19"/><text x="24.6336%" y="111.50"></text></g><g><title>crab_cups`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::add (76 samples, 0.18%)</title><rect x="24.4335%" y="101" width="0.1809%" height="15" fill="rgb(232,23,21)" fg:x="10266" fg:w="76"/><text x="24.6835%" y="111.50"></text></g><g><title>crab_cups`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (39 samples, 0.09%)</title><rect x="24.6240%" y="101" width="0.0928%" height="15" fill="rgb(244,5,23)" fg:x="10346" fg:w="39"/><text x="24.8740%" y="111.50"></text></g><g><title>crab_cups`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (27 samples, 0.06%)</title><rect x="24.7168%" y="101" width="0.0643%" height="15" fill="rgb(226,81,46)" fg:x="10385" fg:w="27"/><text x="24.9668%" y="111.50"></text></g><g><title>crab_cups`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::offset (83 samples, 0.20%)</title><rect x="24.7810%" y="101" width="0.1975%" height="15" fill="rgb(247,70,30)" fg:x="10412" fg:w="83"/><text x="25.0310%" y="111.50"></text></g><g><title>crab_cups`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (66 samples, 0.16%)</title><rect x="24.9810%" y="101" width="0.1571%" height="15" fill="rgb(212,68,19)" fg:x="10496" fg:w="66"/><text x="25.2310%" y="111.50"></text></g><g><title>crab_cups`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::write (5 samples, 0.01%)</title><rect x="25.1380%" y="101" width="0.0119%" height="15" fill="rgb(240,187,13)" fg:x="10562" fg:w="5"/><text x="25.3880%" y="111.50"></text></g><g><title>crab_cups`core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (52 samples, 0.12%)</title><rect x="25.1523%" y="101" width="0.1238%" height="15" fill="rgb(223,113,26)" fg:x="10568" fg:w="52"/><text x="25.4023%" y="111.50"></text></g><g><title>crab_cups`core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (26 samples, 0.06%)</title><rect x="25.2832%" y="101" width="0.0619%" height="15" fill="rgb(206,192,2)" fg:x="10623" fg:w="26"/><text x="25.5332%" y="111.50"></text></g><g><title>crab_cups`core::ptr::read (29 samples, 0.07%)</title><rect x="25.3570%" y="101" width="0.0690%" height="15" fill="rgb(241,108,4)" fg:x="10654" fg:w="29"/><text x="25.6070%" y="111.50"></text></g><g><title>crab_cups`core::ptr::read_unaligned (135 samples, 0.32%)</title><rect x="25.4260%" y="101" width="0.3213%" height="15" fill="rgb(247,173,49)" fg:x="10683" fg:w="135"/><text x="25.6760%" y="111.50"></text></g><g><title>crab_cups`core::ptr::slice_from_raw_parts (15 samples, 0.04%)</title><rect x="25.7569%" y="101" width="0.0357%" height="15" fill="rgb(224,114,35)" fg:x="10822" fg:w="15"/><text x="26.0069%" y="111.50"></text></g><g><title>crab_cups`core::ptr::slice_from_raw_parts_mut (6 samples, 0.01%)</title><rect x="25.7926%" y="101" width="0.0143%" height="15" fill="rgb(245,159,27)" fg:x="10837" fg:w="6"/><text x="26.0426%" y="111.50"></text></g><g><title>crab_cups`core::ptr::swap_nonoverlapping_one (5 samples, 0.01%)</title><rect x="25.8068%" y="101" width="0.0119%" height="15" fill="rgb(245,172,44)" fg:x="10843" fg:w="5"/><text x="26.0568%" y="111.50"></text></g><g><title>crab_cups`core::ptr::unique::Unique&lt;T&gt;::as_ptr (9 samples, 0.02%)</title><rect x="25.8187%" y="101" width="0.0214%" height="15" fill="rgb(236,23,11)" fg:x="10848" fg:w="9"/><text x="26.0687%" y="111.50"></text></g><g><title>crab_cups`core::ptr::write (599 samples, 1.43%)</title><rect x="25.8402%" y="101" width="1.4256%" height="15" fill="rgb(205,117,38)" fg:x="10857" fg:w="599"/><text x="26.0902%" y="111.50"></text></g><g><title>crab_cups`core::result::Result&lt;T,E&gt;::map_err (14 samples, 0.03%)</title><rect x="27.2753%" y="101" width="0.0333%" height="15" fill="rgb(237,72,25)" fg:x="11460" fg:w="14"/><text x="27.5253%" y="111.50"></text></g><g><title>crab_cups`core::result::Result&lt;T,E&gt;::ok (7 samples, 0.02%)</title><rect x="27.3086%" y="101" width="0.0167%" height="15" fill="rgb(244,70,9)" fg:x="11474" fg:w="7"/><text x="27.5586%" y="111.50"></text></g><g><title>crab_cups`core::slice::_&lt;impl [T]&gt;::as_ptr (12 samples, 0.03%)</title><rect x="27.3324%" y="101" width="0.0286%" height="15" fill="rgb(217,125,39)" fg:x="11484" fg:w="12"/><text x="27.5824%" y="111.50"></text></g><g><title>crab_cups`core::slice::_&lt;impl [T]&gt;::len (6 samples, 0.01%)</title><rect x="27.3705%" y="101" width="0.0143%" height="15" fill="rgb(235,36,10)" fg:x="11500" fg:w="6"/><text x="27.6205%" y="111.50"></text></g><g><title>crab_cups`core::slice::index::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (8 samples, 0.02%)</title><rect x="27.3848%" y="101" width="0.0190%" height="15" fill="rgb(251,123,47)" fg:x="11506" fg:w="8"/><text x="27.6348%" y="111.50"></text></g><g><title>crab_cups`core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.01%)</title><rect x="27.4038%" y="101" width="0.0119%" height="15" fill="rgb(221,13,13)" fg:x="11514" fg:w="5"/><text x="27.6538%" y="111.50"></text></g><g><title>crab_cups`core::slice::raw::from_raw_parts (10 samples, 0.02%)</title><rect x="27.4157%" y="101" width="0.0238%" height="15" fill="rgb(238,131,9)" fg:x="11519" fg:w="10"/><text x="27.6657%" y="111.50"></text></g><g><title>crab_cups`core::tuple::_&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (6 samples, 0.01%)</title><rect x="27.4467%" y="101" width="0.0143%" height="15" fill="rgb(211,50,8)" fg:x="11532" fg:w="6"/><text x="27.6967%" y="111.50"></text></g><g><title>crab_cups`crab_cups::cups::CupSet::new (9 samples, 0.02%)</title><rect x="27.4610%" y="101" width="0.0214%" height="15" fill="rgb(245,182,24)" fg:x="11538" fg:w="9"/><text x="27.7110%" y="111.50"></text></g><g><title>crab_cups`hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.02%)</title><rect x="27.4919%" y="101" width="0.0214%" height="15" fill="rgb(242,14,37)" fg:x="11551" fg:w="9"/><text x="27.7419%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (8 samples, 0.02%)</title><rect x="27.5205%" y="101" width="0.0190%" height="15" fill="rgb(246,228,12)" fg:x="11563" fg:w="8"/><text x="27.7705%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::RawIterHash&lt;T&gt;::new (12 samples, 0.03%)</title><rect x="27.5419%" y="101" width="0.0286%" height="15" fill="rgb(213,55,15)" fg:x="11572" fg:w="12"/><text x="27.7919%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::RawTable&lt;T&gt;::ctrl (6 samples, 0.01%)</title><rect x="27.5752%" y="101" width="0.0143%" height="15" fill="rgb(209,9,3)" fg:x="11586" fg:w="6"/><text x="27.8252%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::RawTable&lt;T&gt;::find (14 samples, 0.03%)</title><rect x="27.5990%" y="101" width="0.0333%" height="15" fill="rgb(230,59,30)" fg:x="11596" fg:w="14"/><text x="27.8490%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (6 samples, 0.01%)</title><rect x="27.6323%" y="101" width="0.0143%" height="15" fill="rgb(209,121,21)" fg:x="11610" fg:w="6"/><text x="27.8823%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::RawTable&lt;T&gt;::insert (11 samples, 0.03%)</title><rect x="27.6490%" y="101" width="0.0262%" height="15" fill="rgb(220,109,13)" fg:x="11617" fg:w="11"/><text x="27.8990%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::bitmask::BitMask::lowest_set_bit (10 samples, 0.02%)</title><rect x="27.6990%" y="101" width="0.0238%" height="15" fill="rgb(232,18,1)" fg:x="11638" fg:w="10"/><text x="27.9490%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::generic::repeat (15 samples, 0.04%)</title><rect x="27.7466%" y="101" width="0.0357%" height="15" fill="rgb(215,41,42)" fg:x="11658" fg:w="15"/><text x="27.9966%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::h2 (9 samples, 0.02%)</title><rect x="27.7847%" y="101" width="0.0214%" height="15" fill="rgb(224,123,36)" fg:x="11674" fg:w="9"/><text x="28.0347%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (92 samples, 0.22%)</title><rect x="27.8061%" y="101" width="0.2190%" height="15" fill="rgb(240,125,3)" fg:x="11683" fg:w="92"/><text x="28.0561%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::Bucket&lt;T&gt;::copy_from_nonoverlapping (7 samples, 0.02%)</title><rect x="28.0274%" y="101" width="0.0167%" height="15" fill="rgb(205,98,50)" fg:x="11776" fg:w="7"/><text x="28.2774%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (48 samples, 0.11%)</title><rect x="28.0441%" y="101" width="0.1142%" height="15" fill="rgb(205,185,37)" fg:x="11783" fg:w="48"/><text x="28.2941%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (21 samples, 0.05%)</title><rect x="28.1583%" y="101" width="0.0500%" height="15" fill="rgb(238,207,15)" fg:x="11831" fg:w="21"/><text x="28.4083%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawIterHash&lt;T&gt;::new (47 samples, 0.11%)</title><rect x="28.2250%" y="101" width="0.1119%" height="15" fill="rgb(213,199,42)" fg:x="11859" fg:w="47"/><text x="28.4750%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::bucket (63 samples, 0.15%)</title><rect x="28.3368%" y="101" width="0.1499%" height="15" fill="rgb(235,201,11)" fg:x="11906" fg:w="63"/><text x="28.5868%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::buckets (17 samples, 0.04%)</title><rect x="28.4891%" y="101" width="0.0405%" height="15" fill="rgb(207,46,11)" fg:x="11970" fg:w="17"/><text x="28.7391%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::ctrl (109 samples, 0.26%)</title><rect x="28.5296%" y="101" width="0.2594%" height="15" fill="rgb(241,35,35)" fg:x="11987" fg:w="109"/><text x="28.7796%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::data_end (13 samples, 0.03%)</title><rect x="28.7890%" y="101" width="0.0309%" height="15" fill="rgb(243,32,47)" fg:x="12096" fg:w="13"/><text x="29.0390%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::erase_no_drop (6 samples, 0.01%)</title><rect x="28.8200%" y="101" width="0.0143%" height="15" fill="rgb(247,202,23)" fg:x="12109" fg:w="6"/><text x="29.0700%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::find (65 samples, 0.15%)</title><rect x="28.8343%" y="101" width="0.1547%" height="15" fill="rgb(219,102,11)" fg:x="12115" fg:w="65"/><text x="29.0843%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::find_insert_slot (98 samples, 0.23%)</title><rect x="28.9890%" y="101" width="0.2332%" height="15" fill="rgb(243,110,44)" fg:x="12180" fg:w="98"/><text x="29.2390%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::get (31 samples, 0.07%)</title><rect x="29.2222%" y="101" width="0.0738%" height="15" fill="rgb(222,74,54)" fg:x="12278" fg:w="31"/><text x="29.4722%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::insert (45 samples, 0.11%)</title><rect x="29.2984%" y="101" width="0.1071%" height="15" fill="rgb(216,99,12)" fg:x="12310" fg:w="45"/><text x="29.5484%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::num_ctrl_bytes (60 samples, 0.14%)</title><rect x="29.4126%" y="101" width="0.1428%" height="15" fill="rgb(226,22,26)" fg:x="12358" fg:w="60"/><text x="29.6626%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::probe_seq (39 samples, 0.09%)</title><rect x="29.5554%" y="101" width="0.0928%" height="15" fill="rgb(217,163,10)" fg:x="12418" fg:w="39"/><text x="29.8054%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::resize (34 samples, 0.08%)</title><rect x="29.6482%" y="101" width="0.0809%" height="15" fill="rgb(213,25,53)" fg:x="12457" fg:w="34"/><text x="29.8982%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::RawTable&lt;T&gt;::set_ctrl (36 samples, 0.09%)</title><rect x="29.7292%" y="101" width="0.0857%" height="15" fill="rgb(252,105,26)" fg:x="12491" fg:w="36"/><text x="29.9792%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (123 samples, 0.29%)</title><rect x="29.8172%" y="101" width="0.2927%" height="15" fill="rgb(220,39,43)" fg:x="12528" fg:w="123"/><text x="30.0672%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit_nonzero (9 samples, 0.02%)</title><rect x="30.1100%" y="101" width="0.0214%" height="15" fill="rgb(229,68,48)" fg:x="12651" fg:w="9"/><text x="30.3600%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (8 samples, 0.02%)</title><rect x="30.1314%" y="101" width="0.0190%" height="15" fill="rgb(252,8,32)" fg:x="12660" fg:w="8"/><text x="30.3814%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::bitmask::BitMask::trailing_zeros (12 samples, 0.03%)</title><rect x="30.1504%" y="101" width="0.0286%" height="15" fill="rgb(223,20,43)" fg:x="12668" fg:w="12"/><text x="30.4004%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::generic::Group::load (15 samples, 0.04%)</title><rect x="30.1790%" y="101" width="0.0357%" height="15" fill="rgb(229,81,49)" fg:x="12680" fg:w="15"/><text x="30.4290%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::generic::Group::match_byte (20 samples, 0.05%)</title><rect x="30.2147%" y="101" width="0.0476%" height="15" fill="rgb(236,28,36)" fg:x="12695" fg:w="20"/><text x="30.4647%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::generic::Group::match_empty (7 samples, 0.02%)</title><rect x="30.2623%" y="101" width="0.0167%" height="15" fill="rgb(249,185,26)" fg:x="12715" fg:w="7"/><text x="30.5123%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::generic::Group::match_empty_or_deleted (7 samples, 0.02%)</title><rect x="30.2789%" y="101" width="0.0167%" height="15" fill="rgb(249,174,33)" fg:x="12722" fg:w="7"/><text x="30.5289%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::generic::repeat (75 samples, 0.18%)</title><rect x="30.2956%" y="101" width="0.1785%" height="15" fill="rgb(233,201,37)" fg:x="12729" fg:w="75"/><text x="30.5456%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::h2 (69 samples, 0.16%)</title><rect x="30.4836%" y="101" width="0.1642%" height="15" fill="rgb(221,78,26)" fg:x="12808" fg:w="69"/><text x="30.7336%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::special_is_empty (5 samples, 0.01%)</title><rect x="30.6645%" y="101" width="0.0119%" height="15" fill="rgb(250,127,30)" fg:x="12884" fg:w="5"/><text x="30.9145%" y="111.50"></text></g><g><title>crab_cups`hashbrown::raw::inner::unlikely (6 samples, 0.01%)</title><rect x="30.6764%" y="101" width="0.0143%" height="15" fill="rgb(230,49,44)" fg:x="12889" fg:w="6"/><text x="30.9264%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (10 samples, 0.02%)</title><rect x="30.6931%" y="101" width="0.0238%" height="15" fill="rgb(229,67,23)" fg:x="12896" fg:w="10"/><text x="30.9431%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (7 samples, 0.02%)</title><rect x="30.7169%" y="101" width="0.0167%" height="15" fill="rgb(249,83,47)" fg:x="12906" fg:w="7"/><text x="30.9669%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::IndexMap&lt;K,V,S&gt;::hash (11 samples, 0.03%)</title><rect x="30.7407%" y="101" width="0.0262%" height="15" fill="rgb(215,43,3)" fg:x="12916" fg:w="11"/><text x="30.9907%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::Entry&lt;K,V&gt;::or_insert_with (19 samples, 0.05%)</title><rect x="30.7859%" y="101" width="0.0452%" height="15" fill="rgb(238,154,13)" fg:x="12935" fg:w="19"/><text x="31.0359%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (8 samples, 0.02%)</title><rect x="30.8311%" y="101" width="0.0190%" height="15" fill="rgb(219,56,2)" fg:x="12954" fg:w="8"/><text x="31.0811%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (12 samples, 0.03%)</title><rect x="30.8502%" y="101" width="0.0286%" height="15" fill="rgb(233,0,4)" fg:x="12962" fg:w="12"/><text x="31.1002%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (28 samples, 0.07%)</title><rect x="30.8811%" y="101" width="0.0666%" height="15" fill="rgb(235,30,7)" fg:x="12975" fg:w="28"/><text x="31.1311%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::equivalent (12 samples, 0.03%)</title><rect x="30.9549%" y="101" width="0.0286%" height="15" fill="rgb(250,79,13)" fg:x="13006" fg:w="12"/><text x="31.2049%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::equivalent::_{{closure}} (16 samples, 0.04%)</title><rect x="30.9834%" y="101" width="0.0381%" height="15" fill="rgb(211,146,34)" fg:x="13018" fg:w="16"/><text x="31.2334%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::get_hash::_{{closure}} (18 samples, 0.04%)</title><rect x="31.0215%" y="101" width="0.0428%" height="15" fill="rgb(228,22,38)" fg:x="13034" fg:w="18"/><text x="31.2715%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::raw::OccupiedEntry&lt;K,V&gt;::into_mut (6 samples, 0.01%)</title><rect x="31.0715%" y="101" width="0.0143%" height="15" fill="rgb(235,168,5)" fg:x="13055" fg:w="6"/><text x="31.3215%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::raw::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (38 samples, 0.09%)</title><rect x="31.0858%" y="101" width="0.0904%" height="15" fill="rgb(221,155,16)" fg:x="13061" fg:w="38"/><text x="31.3358%" y="111.50"></text></g><g><title>crab_cups`indexmap::map::core::update_index (5 samples, 0.01%)</title><rect x="31.1762%" y="101" width="0.0119%" height="15" fill="rgb(215,215,53)" fg:x="13099" fg:w="5"/><text x="31.4262%" y="111.50"></text></g><g><title>crab_cups`petgraph::graphmap::GraphMap&lt;N,E,Ty&gt;::add_edge (23 samples, 0.05%)</title><rect x="31.1929%" y="101" width="0.0547%" height="15" fill="rgb(223,4,10)" fg:x="13106" fg:w="23"/><text x="31.4429%" y="111.50"></text></g><g><title>crab_cups`petgraph::graphmap::GraphMap&lt;N,E,Ty&gt;::neighbors (8 samples, 0.02%)</title><rect x="31.2571%" y="101" width="0.0190%" height="15" fill="rgb(234,103,6)" fg:x="13133" fg:w="8"/><text x="31.5071%" y="111.50"></text></g><g><title>crab_cups`petgraph::visit::traversal::Dfs&lt;N,VM&gt;::next (7 samples, 0.02%)</title><rect x="31.2928%" y="101" width="0.0167%" height="15" fill="rgb(227,97,0)" fg:x="13148" fg:w="7"/><text x="31.5428%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (307 samples, 0.73%)</title><rect x="31.3476%" y="101" width="0.7307%" height="15" fill="rgb(234,150,53)" fg:x="13171" fg:w="307"/><text x="31.5976%" y="111.50"></text></g><g><title>all (42,016 samples, 100%)</title><rect x="0.0000%" y="117" width="100.0000%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="42016"/><text x="0.2500%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (28,538 samples, 67.92%)</title><rect x="32.0783%" y="101" width="67.9217%" height="15" fill="rgb(222,22,37)" fg:x="13478" fg:w="28538"/><text x="32.3283%" y="111.50">libsystem_platform.dylib`_platform_memset</text></g></svg></svg>